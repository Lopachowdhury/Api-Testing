{
	"info": {
		"_postman_id": "b833d1ea-8c54-4bbf-8665-40bbd052f807",
		"name": "Lopachowdhury",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29253980",
		"_collection_link": "https://cloudy-escape-909149.postman.co/workspace/It-training-bd~14756c05-5dc1-4c13-8f14-c3e1535c25c2/collection/29253980-b833d1ea-8c54-4bbf-8665-40bbd052f807?action=share&source=collection_link&creator=29253980"
	},
	"item": [
		{
			"name": "Get students",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"var statuscode=pm.response.code\r",
							"console.log(\"Status code is:\"+statuscode)\r",
							"if(statuscode==200){\r",
							"   \r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"else if(statuscode==201){\r",
							"    pm.test(\"Created\",function(){\r",
							"        pm.response.to.have.status(201)\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==202){\r",
							"    pm.test(\"Accepted\",function(){\r",
							"        pm.response.to.have.status(202);\r",
							"\r",
							"    });\r",
							"}\r",
							"else if(statuscode==400){\r",
							"    pm.test(\"Bad Request\",function(){\r",
							"        pm.response.to.have.status(400);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==401){\r",
							"    pm.test(\"Unauthorized\",function(){\r",
							"        pm.response.to.have.status(401);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==402){\r",
							"    pm.test(\"Payment Required\",function(){\r",
							"        pm.response.to.have.status(402);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==403){\r",
							"    pm.test(\"Forbidden\",function(){\r",
							"        pm.response.to.have.status(403);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==404){\r",
							"    pm.test(\"Not Found\",function(){\r",
							"        pm.response.to.have.status(404);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==405){\r",
							"    pm.test(\"Method not Allowed\",function(){\r",
							"        pm.response.to.have.status(405);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==500){\r",
							"    pm.test(\"Internal Server Error\",function(){\r",
							"        pm.response.to.have.status(500);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==501){\r",
							"    pm.test(\"Not Implemented\",function(){\r",
							"        pm.response.to.have.status(501);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==502){\r",
							"    pm.test(\"Bad Gateway\",function(){\r",
							"        pm.response.to.have.status(502);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==503){\r",
							"    pm.test(\"Service Unavailable\",function(){\r",
							"        pm.response.to.have.status(503);\r",
							"\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Something is wrong----\")\r",
							"}\r",
							"\r",
							"console.log(\"Length is:\" +jsonData.length)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/studentsDetails",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create student",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName=pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(\"First Name Value:\" +firstName)\r",
							"pm.environment.set(\"firstname\",firstName)\r",
							"\r",
							"var middleName=pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(\"Middle Name value:\"+middleName)\r",
							"pm.environment.set(\"middlename\",middleName)\r",
							"\r",
							"var lastName=pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(\"Last Name Value:\"+lastName)\r",
							"pm.environment.set(\"lastname\",lastName)\r",
							"\r",
							"const moment=require('moment')\r",
							"const today=moment()\r",
							"console.log(today.add(-10,'Y').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"birthday\",today.add(-10,'Y').format(\"YYYY-MM-DD\"))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"pm.environment.set(\"sid\",jsonData.id)\r",
							"console.log(jsonData.id)\r",
							"\r",
							"var statuscode=pm.response.code\r",
							"console.log(\"Status code is:\"+statuscode)\r",
							"if(statuscode==200){\r",
							"    pm.test(\"Status code value is 200\",function(){\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"    });\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"else if(statuscode==201){\r",
							"    pm.test(\"Created\",function(){\r",
							"        pm.response.to.have.status(201)\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==202){\r",
							"    pm.test(\"Accepted\",function(){\r",
							"        pm.response.to.have.status(202);\r",
							"\r",
							"    });\r",
							"}\r",
							"else if(statuscode==400){\r",
							"    pm.test(\"Bad Request\",function(){\r",
							"        pm.response.to.have.status(400);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==401){\r",
							"    pm.test(\"Unauthorized\",function(){\r",
							"        pm.response.to.have.status(401);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==402){\r",
							"    pm.test(\"Payment Required\",function(){\r",
							"        pm.response.to.have.status(402);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==403){\r",
							"    pm.test(\"Forbidden\",function(){\r",
							"        pm.response.to.have.status(403);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==404){\r",
							"    pm.test(\"Not Found\",function(){\r",
							"        pm.response.to.have.status(404);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==405){\r",
							"    pm.test(\"Method not Allowed\",function(){\r",
							"        pm.response.to.have.status(405);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==500){\r",
							"    pm.test(\"Internal Server Error\",function(){\r",
							"        pm.response.to.have.status(500);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==501){\r",
							"    pm.test(\"Not Implemented\",function(){\r",
							"        pm.response.to.have.status(501);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==502){\r",
							"    pm.test(\"Bad Gateway\",function(){\r",
							"        pm.response.to.have.status(502);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==503){\r",
							"    pm.test(\"Service Unavailable\",function(){\r",
							"        pm.response.to.have.status(503);\r",
							"\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Something is wrong----\")\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"first_name\": \"{{firstname}}\", \r\n\"middle_name\": \"{{middlename}}\", \r\n\"last_name\": \"{{lastname}}\", \r\n\"date_of_birth\": \"{{birthday}}\" \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/studentsDetails",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"var statuscode=pm.response.code\r",
							"console.log(\"Status code is:\"+statuscode)\r",
							"if(statuscode==200){\r",
							"   \r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Id validation:\",function(){\r",
							"        pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"sid\"))\r",
							"    });\r",
							"    \r",
							"    pm.test(\"First Name Validation:\", function(){\r",
							"        pm.expect(jsonData.data.first_name).to.eql(pm.environment.get(\"firstname\"))\r",
							"\r",
							"    });\r",
							"\r",
							"    pm.test(\"Middle Name Validation:\", function(){\r",
							"        pm.expect(jsonData.data.middle_name).to.eql(pm.environment.get(\"middlename\"))\r",
							"\r",
							"    });\r",
							"\r",
							"     \r",
							"     pm.test(\"Last Name Validation:\", function(){\r",
							"        pm.expect(jsonData.data.last_name).to.eql(pm.environment.get(\"lastname\"))\r",
							"\r",
							"    });\r",
							"\r",
							"     pm.test(\"Birthday Validation:\", function(){\r",
							"        pm.expect(jsonData.data.date_of_birth).to.eql(pm.environment.get(\"birthday\"))\r",
							"\r",
							"    });\r",
							"\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"else if(statuscode==201){\r",
							"    pm.test(\"Created\",function(){\r",
							"        pm.response.to.have.status(201)\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==202){\r",
							"    pm.test(\"Accepted\",function(){\r",
							"        pm.response.to.have.status(202);\r",
							"\r",
							"    });\r",
							"}\r",
							"else if(statuscode==400){\r",
							"    pm.test(\"Bad Request\",function(){\r",
							"        pm.response.to.have.status(400);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==401){\r",
							"    pm.test(\"Unauthorized\",function(){\r",
							"        pm.response.to.have.status(401);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==402){\r",
							"    pm.test(\"Payment Required\",function(){\r",
							"        pm.response.to.have.status(402);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==403){\r",
							"    pm.test(\"Forbidden\",function(){\r",
							"        pm.response.to.have.status(403);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==404){\r",
							"    pm.test(\"Not Found\",function(){\r",
							"        pm.response.to.have.status(404);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==405){\r",
							"    pm.test(\"Method not Allowed\",function(){\r",
							"        pm.response.to.have.status(405);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==500){\r",
							"    pm.test(\"Internal Server Error\",function(){\r",
							"        pm.response.to.have.status(500);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==501){\r",
							"    pm.test(\"Not Implemented\",function(){\r",
							"        pm.response.to.have.status(501);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==502){\r",
							"    pm.test(\"Bad Gateway\",function(){\r",
							"        pm.response.to.have.status(502);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==503){\r",
							"    pm.test(\"Service Unavailable\",function(){\r",
							"        pm.response.to.have.status(503);\r",
							"\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Something is wrong----\")\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/studentsDetails/{{sid}}",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{sid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Technical Skills",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var language=pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
							"console.log(\"Language:\"+language)\r",
							"pm.environment.set(\"language\",language)\r",
							"\r",
							"const randomNumber = _ .random(1,10)\r",
							"pm.environment.set(\"yearexp\",randomNumber)\r",
							"console.log(randomNumber)\r",
							"\t\t\t\t\t\t\t\r",
							"const moment=require('moment')\r",
							"const today=moment()\r",
							"console.log(today.add(-10,'Y').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"lastused\",today.add(-10,'Y').format(\"YYYY-MM-DD\"))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"var statuscode=pm.response.code\r",
							"console.log(\"Status code is:\"+statuscode)\r",
							"if(statuscode==200){\r",
							"    pm.test(\"Status code value is 200\",function(){\r",
							"        pm.response.to.have.status(200);\r",
							"\r",
							"    });\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"else if(statuscode==201){\r",
							"    pm.test(\"Created\",function(){\r",
							"        pm.response.to.have.status(201)\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==202){\r",
							"    pm.test(\"Accepted\",function(){\r",
							"        pm.response.to.have.status(202);\r",
							"\r",
							"    });\r",
							"}\r",
							"else if(statuscode==400){\r",
							"    pm.test(\"Bad Request\",function(){\r",
							"        pm.response.to.have.status(400);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==401){\r",
							"    pm.test(\"Unauthorized\",function(){\r",
							"        pm.response.to.have.status(401);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==402){\r",
							"    pm.test(\"Payment Required\",function(){\r",
							"        pm.response.to.have.status(402);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==403){\r",
							"    pm.test(\"Forbidden\",function(){\r",
							"        pm.response.to.have.status(403);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==404){\r",
							"    pm.test(\"Not Found\",function(){\r",
							"        pm.response.to.have.status(404);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==405){\r",
							"    pm.test(\"Method not Allowed\",function(){\r",
							"        pm.response.to.have.status(405);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==500){\r",
							"    pm.test(\"Internal Server Error\",function(){\r",
							"        pm.response.to.have.status(500);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==501){\r",
							"    pm.test(\"Not Implemented\",function(){\r",
							"        pm.response.to.have.status(501);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==502){\r",
							"    pm.test(\"Bad Gateway\",function(){\r",
							"        pm.response.to.have.status(502);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==503){\r",
							"    pm.test(\"Service Unavailable\",function(){\r",
							"        pm.response.to.have.status(503);\r",
							"\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Something is wrong----\")\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"id\": 1, \r\n\"language\": [ \r\n\"{{language}}\" \r\n], \r\n\"yearexp\": \"{{yearexp}}\", \r\n\"lastused\": \"{{lastused}}\", \r\n\"st_id\": \"{{sid}}\" \r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/technicalskills",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"technicalskills"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"\r",
							"var statuscode=pm.response.code\r",
							"console.log(\"Status code is:\"+statuscode)\r",
							"if(statuscode==200){\r",
							"    pm.test(\"Status code value is 200\",function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Status Validation\",function(){\r",
							"        pm.expect(jsonData.status).to.eql(\"true\")\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsonData.msg).to.eql(\"Add  data success\")\r",
							"    });\r",
							"    \r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"else if(statuscode==201){\r",
							"    pm.test(\"Created\",function(){\r",
							"        pm.response.to.have.status(201)\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==202){\r",
							"    pm.test(\"Accepted\",function(){\r",
							"        pm.response.to.have.status(202);\r",
							"\r",
							"    });\r",
							"}\r",
							"else if(statuscode==400){\r",
							"    pm.test(\"Bad Request\",function(){\r",
							"        pm.response.to.have.status(400);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==401){\r",
							"    pm.test(\"Unauthorized\",function(){\r",
							"        pm.response.to.have.status(401);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==402){\r",
							"    pm.test(\"Payment Required\",function(){\r",
							"        pm.response.to.have.status(402);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==403){\r",
							"    pm.test(\"Forbidden\",function(){\r",
							"        pm.response.to.have.status(403);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==404){\r",
							"    pm.test(\"Not Found\",function(){\r",
							"        pm.response.to.have.status(404);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==405){\r",
							"    pm.test(\"Method not Allowed\",function(){\r",
							"        pm.response.to.have.status(405);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==500){\r",
							"    pm.test(\"Internal Server Error\",function(){\r",
							"        pm.response.to.have.status(500);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==501){\r",
							"    pm.test(\"Not Implemented\",function(){\r",
							"        pm.response.to.have.status(501);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==502){\r",
							"    pm.test(\"Bad Gateway\",function(){\r",
							"        pm.response.to.have.status(502);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==503){\r",
							"    pm.test(\"Service Unavailable\",function(){\r",
							"        pm.response.to.have.status(503);\r",
							"\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Something is wrong----\")\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var houseNumber=pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"House Number is: \"+houseNumber)\r",
							"pm.environment.set(\"housenumber\",houseNumber)\r",
							"\r",
							"var city=pm.variables.replaceIn(\"{{$randomCity}}\")\r",
							"console.log(\"City Name: \"+city)\r",
							"pm.environment.set(\"city\",city)\r",
							"\r",
							"var state =pm.variables.replaceIn(\"{{$randomCity}}\")\r",
							"console.log(\"State Name: \"+state)\r",
							"pm.environment.set(\"state\",state)\r",
							"\r",
							"var country =pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
							"console.log(\"Country Name: \"+country)\r",
							"pm.environment.set(\"country\",country)\r",
							"\r",
							"var stdCode =pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"Student Code is: \"+stdCode)\r",
							"pm.environment.set(\"stdcode\",stdCode)\r",
							"\r",
							"var home =pm.variables.replaceIn(\"{{$randomWord}}\")\r",
							"console.log(\"Home Name: \"+home)\r",
							"pm.environment.set(\"home\",home)\r",
							"\r",
							"var mobile =pm.variables.replaceIn(\"{{$randomPhoneNumberExt}}\")\r",
							"console.log(\"Mobile Number: \"+mobile)\r",
							"pm.environment.set(\"mobile\",mobile)\r",
							"\r",
							"\r",
							"var stdCode =pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"Student Code is: \"+stdCode)\r",
							"pm.environment.set(\"stdcode2\",stdCode)\r",
							"\r",
							"var home =pm.variables.replaceIn(\"{{$randomWord}}\")\r",
							"console.log(\"Home Name: \"+home)\r",
							"pm.environment.set(\"home2\",home)\r",
							"\r",
							"var mobile =pm.variables.replaceIn(\"{{$randomPhoneNumberExt}}\")\r",
							"console.log(\"Mobile Number: \"+mobile)\r",
							"pm.environment.set(\"mobile2\",mobile)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"Permanent_Address\": { \r\n\"House_Number\": \"{{housenumber}}\",\r\n\"City\": \"{{city}}\",\r\n\"State\": \"{{state}}\", \r\n\"Country\": \"{{country}}\",\r\n\"PhoneNumber\": [ \r\n{ \r\n\"Std_Code\": \"{{stdcode}}\",\r\n\"Home\": \"{{home}}\",\r\n \"Mobile\": \"{{mobile}}\" \r\n},\r\n{ \r\n\"Std_Code\": \"{{stdcode2}}\",\r\n\"Home\": \"{{home2}}\", \r\n\"Mobile\": \"{{mobile2}}\" \r\n} \r\n] \r\n},\r\n\"stId\": {{sid}}\r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/addresses",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Final students details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"\r",
							"var statuscode=pm.response.code\r",
							"console.log(\"Status code is:\"+statuscode)\r",
							"if(statuscode==200){\r",
							"    pm.test(\"Status code value is 200\",function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Language Validation\",function(){\r",
							"        pm.expect(jsonData.data.TechnicalDetails[0].language[0]).to.eql(pm.environment.get(\"language\"))\r",
							"    });\r",
							"\r",
							"    pm.test(\"Year Experience Validation\",function(){\r",
							"        pm.expect(parseInt(jsonData.data.TechnicalDetails[0].yearexp)).to.eql(pm.environment.get(\"yearexp\"))\r",
							"    });\r",
							"     pm.test(\"House Number Validation:\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.House_Number).to.eql(pm.environment.get(\"housenumber\"))\r",
							"    });\r",
							"    pm.test(\"City Name Validation:\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.City).to.eql(pm.environment.get(\"city\"))\r",
							"    });\r",
							"\r",
							"    pm.test(\"Country Name Validation:\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.Country).to.eql(pm.environment.get(\"country\"))\r",
							"    });\r",
							"    pm.test(\"Mobile Number Validation:\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[1].Mobile).to.eql(pm.environment.get(\"mobile2\"))\r",
							"    });\r",
							"    pm.test(\"Current Address Validation:\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Current_Address).to.eql(null)\r",
							"    });\r",
							"\r",
							"    \r",
							"    \r",
							"    \r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"else if(statuscode==201){\r",
							"    pm.test(\"Created\",function(){\r",
							"        pm.response.to.have.status(201)\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==202){\r",
							"    pm.test(\"Accepted\",function(){\r",
							"        pm.response.to.have.status(202);\r",
							"\r",
							"    });\r",
							"}\r",
							"else if(statuscode==400){\r",
							"    pm.test(\"Bad Request\",function(){\r",
							"        pm.response.to.have.status(400);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==401){\r",
							"    pm.test(\"Unauthorized\",function(){\r",
							"        pm.response.to.have.status(401);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==402){\r",
							"    pm.test(\"Payment Required\",function(){\r",
							"        pm.response.to.have.status(402);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==403){\r",
							"    pm.test(\"Forbidden\",function(){\r",
							"        pm.response.to.have.status(403);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==404){\r",
							"    pm.test(\"Not Found\",function(){\r",
							"        pm.response.to.have.status(404);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==405){\r",
							"    pm.test(\"Method not Allowed\",function(){\r",
							"        pm.response.to.have.status(405);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==500){\r",
							"    pm.test(\"Internal Server Error\",function(){\r",
							"        pm.response.to.have.status(500);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==501){\r",
							"    pm.test(\"Not Implemented\",function(){\r",
							"        pm.response.to.have.status(501);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==502){\r",
							"    pm.test(\"Bad Gateway\",function(){\r",
							"        pm.response.to.have.status(502);\r",
							"\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(statuscode==503){\r",
							"    pm.test(\"Service Unavailable\",function(){\r",
							"        pm.response.to.have.status(503);\r",
							"\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Something is wrong----\")\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/FinalStudentDetails/{{sid}}",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"FinalStudentDetails",
						"{{sid}}"
					]
				}
			},
			"response": []
		}
	]
}